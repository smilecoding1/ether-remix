import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv(r"C:\Users\Aditi\Downloads\archive\HousingData.csv")

# Handle missing values by dropping rows with any NaNs
data = data.dropna()

# Split features and target
X = data.drop("MEDV", axis=1)
y = data["MEDV"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Build the DNN model
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    layers.Dense(32, activation='relu'),
    layers.Dense(1)
])

# Compile the model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# Train the model
history = model.fit(X_train_scaled, y_train, validation_split=0.1, epochs=100, batch_size=32, verbose=1)

# Evaluate the model
loss, mae = model.evaluate(X_test_scaled, y_test)
print(f"\nMean Absolute Error on Test Data: {mae:.2f}")

# Predict house prices
y_pred = model.predict(X_test_scaled).flatten()

# Evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Print actual vs predicted prices (first 10 examples)
print("\nActual vs Predicted House Prices (First 10 rows):")
for actual, predicted in list(zip(y_test, y_pred))[:10]:
    print(f"Actual: {actual:.2f}, Predicted: {predicted:.2f}")

# Plotting
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='green', alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--r')
plt.xlabel('Actual Prices (in $1000s)')
plt.ylabel('Predicted Prices (in $1000s)')
plt.title('Actual vs Predicted Boston House Prices')
plt.grid(True)
plt.show()


